// Generated by Xata Codegen 0.28.3. Please do not edit.
import { buildClient } from "@xata.io/client";
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from "@xata.io/client";

const tables = [
  {
    name: "players",
    columns: [
      { name: "first_name", type: "string" },
      { name: "last_name", type: "string" },
      { name: "professional", type: "bool" },
    ],
    revLinks: [{ column: "playerId", table: "handles" }],
  },
  {
    name: "handles",
    columns: [
      { name: "site", type: "string" },
      { name: "handle", type: "string" },
      { name: "playerId", type: "link", link: { table: "players" } },
    ],
  },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type Players = InferredTypes["players"];
export type PlayersRecord = Players & XataRecord;

export type Handles = InferredTypes["handles"];
export type HandlesRecord = Handles & XataRecord;

export type DatabaseSchema = {
  players: PlayersRecord;
  handles: HandlesRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL:
    "https://Dan-Reale-s-workspace-3m1pjh.us-east-1.xata.sh/db/googlemytable",
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient();
  return instance;
};
